/**
 * @type {import("@jest/types").Config.InitialOptions}
 */
module.exports = {
  displayName: 'cafe24api-client',
  preset: '../../jest.preset.js',
  transform: {
    '^.+\\.js$': 'babel-jest',
  },
  moduleNameMapper: {
    /**
     * @todo
     * Further research if this is the best way to solve the problem described below.
     *
     * @description
     * IDK why, but babel-jest keep tries to resolve type definition (i.e *.d.ts) files
     * which results `Unexpected token 'export'` error.
     * (This might be related with jest preset generated by @nx/jest:configuration generator,
     * which opts into ts-jest by default)
     *
     * So for a workaround, I added this module mapper for jest
     * to directly resolve the module from the dist folder.
     */
    'change-case': '<rootDir>/node_modules/change-case/dist/index.js',
  },
  /**
   * @todo
   * Further research if this is the best way to solve the problem described below.
   *
   * @description
   * Since `change-case` is not a CommonJS module,
   * there still exists a problem that jest cannot resolve the module.
   *
   * So for a workaround, I removed default `transformIgnorePatterns` option
   * which includes `node_modules` by default.
   *
   * This makes sure that jest will try to transform `change-case` module
   * from ES6 to CommonJS.
   *
   * @see https://stackoverflow.com/questions/49263429/jest-gives-an-error-syntaxerror-unexpected-token-export
   */
  transformIgnorePatterns: [],
  coverageDirectory: '../../coverage/packages/cafe24api-client',
};


export default (cls) => {
  cls.prototype.retrieveAListOfProducts = async function (input, options) {
    return this.createRequest(
      'GET',
      `/api/v2/admin/products`,
      {
        channeldiscountprices: input['channeldiscountprices'],
        discountprice: input['discountprice'],
        decorationimages: input['decorationimages'],
        benefits: input['benefits'],
        options: input['options'],
        variants: input['variants'],
        additionalimages: input['additionalimages'],
        shop_no: input['shop_no'],
        product_no: input['product_no'],
        display: input['display'],
        selling: input['selling'],
        product_name: input['product_name'],
        product_code: input['product_code'],
        brand_code: input['brand_code'],
        manufacturer_code: input['manufacturer_code'],
        supplier_code: input['supplier_code'],
        trend_code: input['trend_code'],
        product_tag: input['product_tag'],
        custom_product_code: input['custom_product_code'],
        custom_variant_code: input['custom_variant_code'],
        price_min: input['price_min'],
        price_max: input['price_max'],
        retail_price_min: input['retail_price_min'],
        retail_price_max: input['retail_price_max'],
        supply_price_min: input['supply_price_min'],
        supply_price_max: input['supply_price_max'],
        created_start_date: input['created_start_date'],
        created_end_date: input['created_end_date'],
        updated_start_date: input['updated_start_date'],
        updated_end_date: input['updated_end_date'],
        category: input['category'],
        eng_product_name: input['eng_product_name'],
        supply_product_name: input['supply_product_name'],
        internal_product_name: input['internal_product_name'],
        model_name: input['model_name'],
        product_condition: input['product_condition'],
        origin_place_value: input['origin_place_value'],
        stock_quantity_max: input['stock_quantity_max'],
        stock_quantity_min: input['stock_quantity_min'],
        stock_safety_max: input['stock_safety_max'],
        stock_safety_min: input['stock_safety_min'],
        product_weight: input['product_weight'],
        classification_code: input['classification_code'],
        use_inventory: input['use_inventory'],
        category_unapplied: input['category_unapplied'],
        include_sub_category: input['include_sub_category'],
        additional_information_key: input['additional_information_key'],
        additional_information_value: input['additional_information_value'],
        approve_status: input['approve_status'],
        since_product_no: input['since_product_no'],
        product_bundle: input['product_bundle'],
        option_type: input['option_type'],
        market_sync: input['market_sync'],
        sort: input['sort'],
        order: input['order'],
        offset: input['offset'],
        limit: input['limit'],
      },
      options,
    );
  };

  cls.prototype.retrieveACountOfProducts = async function (input, options) {
    return this.createRequest(
      'GET',
      `/api/v2/admin/products/count`,
      {
        shop_no: input['shop_no'],
        product_no: input['product_no'],
        display: input['display'],
        selling: input['selling'],
        product_name: input['product_name'],
        product_code: input['product_code'],
        brand_code: input['brand_code'],
        manufacturer_code: input['manufacturer_code'],
        supplier_code: input['supplier_code'],
        trend_code: input['trend_code'],
        product_tag: input['product_tag'],
        custom_product_code: input['custom_product_code'],
        custom_variant_code: input['custom_variant_code'],
        price_min: input['price_min'],
        price_max: input['price_max'],
        retail_price_min: input['retail_price_min'],
        retail_price_max: input['retail_price_max'],
        supply_price_min: input['supply_price_min'],
        supply_price_max: input['supply_price_max'],
        created_start_date: input['created_start_date'],
        created_end_date: input['created_end_date'],
        updated_start_date: input['updated_start_date'],
        updated_end_date: input['updated_end_date'],
        category: input['category'],
        eng_product_name: input['eng_product_name'],
        supply_product_name: input['supply_product_name'],
        internal_product_name: input['internal_product_name'],
        model_name: input['model_name'],
        product_condition: input['product_condition'],
        origin_place_value: input['origin_place_value'],
        stock_quantity_max: input['stock_quantity_max'],
        stock_quantity_min: input['stock_quantity_min'],
        stock_safety_max: input['stock_safety_max'],
        stock_safety_min: input['stock_safety_min'],
        product_weight: input['product_weight'],
        classification_code: input['classification_code'],
        use_inventory: input['use_inventory'],
        category_unapplied: input['category_unapplied'],
        include_sub_category: input['include_sub_category'],
        additional_information_key: input['additional_information_key'],
        additional_information_value: input['additional_information_value'],
        approve_status: input['approve_status'],
        since_product_no: input['since_product_no'],
        product_bundle: input['product_bundle'],
        option_type: input['option_type'],
        market_sync: input['market_sync'],
      },
      options,
    );
  };

  cls.prototype.retrieveAProductResource = async function (input, options) {
    return this.createRequest(
      'GET',
      `/api/v2/admin/products/${input['product_no']}`,
      {
        shop_no: input['shop_no'],
        product_no: input['product_no'],
        variants: input['variants'],
        memos: input['memos'],
        hits: input['hits'],
        seo: input['seo'],
        tags: input['tags'],
        options: input['options'],
        discountprice: input['discountprice'],
        decorationimages: input['decorationimages'],
        benefits: input['benefits'],
        additionalimages: input['additionalimages'],
      },
      options,
    );
  };

  cls.prototype.createAProduct = async function (input, options) {
    return this.createRequest(
      'POST',
      `/api/v2/admin/products`,
      {
        display: input['display'],
        selling: input['selling'],
        product_condition: input['product_condition'],
        product_used_month: input['product_used_month'],
        add_category_no: input['add_category_no'],
        custom_product_code: input['custom_product_code'],
        product_name: input['product_name'],
        eng_product_name: input['eng_product_name'],
        supply_product_name: input['supply_product_name'],
        internal_product_name: input['internal_product_name'],
        model_name: input['model_name'],
        price_excluding_tax: input['price_excluding_tax'],
        price: input['price'],
        retail_price: input['retail_price'],
        supply_price: input['supply_price'],
        has_option: input['has_option'],
        options: input['options'],
        use_naverpay: input['use_naverpay'],
        naverpay_type: input['naverpay_type'],
        manufacturer_code: input['manufacturer_code'],
        trend_code: input['trend_code'],
        brand_code: input['brand_code'],
        supplier_code: input['supplier_code'],
        product_weight: input['product_weight'],
        made_date: input['made_date'],
        release_date: input['release_date'],
        expiration_date: input['expiration_date'],
        description: input['description'],
        mobile_description: input['mobile_description'],
        summary_description: input['summary_description'],
        simple_description: input['simple_description'],
        translated_description: input['translated_description'],
        product_tag: input['product_tag'],
        payment_info: input['payment_info'],
        shipping_info: input['shipping_info'],
        exchange_info: input['exchange_info'],
        service_info: input['service_info'],
        icon: input['icon'],
        hscode: input['hscode'],
        country_hscode: input['country_hscode'],
        shipping_scope: input['shipping_scope'],
        shipping_method: input['shipping_method'],
        shipping_fee_by_product: input['shipping_fee_by_product'],
        shipping_area: input['shipping_area'],
        shipping_period: input['shipping_period'],
        shipping_fee_type: input['shipping_fee_type'],
        shipping_rates: input['shipping_rates'],
        prepaid_shipping_fee: input['prepaid_shipping_fee'],
        clearance_category_code: input['clearance_category_code'],
        detail_image: input['detail_image'],
        list_image: input['list_image'],
        tiny_image: input['tiny_image'],
        small_image: input['small_image'],
        image_upload_type: input['image_upload_type'],
        additional_information: input['additional_information'],
        price_content: input['price_content'],
        buy_limit_by_product: input['buy_limit_by_product'],
        buy_limit_type: input['buy_limit_type'],
        buy_group_list: input['buy_group_list'],
        buy_member_id_list: input['buy_member_id_list'],
        repurchase_restriction: input['repurchase_restriction'],
        single_purchase_restriction: input['single_purchase_restriction'],
        buy_unit_type: input['buy_unit_type'],
        buy_unit: input['buy_unit'],
        order_quantity_limit_type: input['order_quantity_limit_type'],
        minimum_quantity: input['minimum_quantity'],
        maximum_quantity: input['maximum_quantity'],
        points_by_product: input['points_by_product'],
        points_setting_by_payment: input['points_setting_by_payment'],
        points_amount: input['points_amount'],
        except_member_points: input['except_member_points'],
        product_volume: input['product_volume'],
        origin_classification: input['origin_classification'],
        origin_place_no: input['origin_place_no'],
        origin_place_value: input['origin_place_value'],
        made_in_code: input['made_in_code'],
        main: input['main'],
        relational_product: input['relational_product'],
        product_material: input['product_material'],
        english_product_material: input['english_product_material'],
        cloth_fabric: input['cloth_fabric'],
        classification_code: input['classification_code'],
        additional_price: input['additional_price'],
        margin_rate: input['margin_rate'],
        tax_type: input['tax_type'],
        tax_rate: input['tax_rate'],
        additional_image: input['additional_image'],
        adult_certification: input['adult_certification'],
        exposure_limit_type: input['exposure_limit_type'],
        exposure_group_list: input['exposure_group_list'],
        use_kakaopay: input['use_kakaopay'],
      },
      options,
    );
  };

  cls.prototype.updateAProduct = async function (input, options) {
    return this.createRequest(
      'PUT',
      `/api/v2/admin/products/${input['product_no']}`,
      {
        shop_no: input['shop_no'],
        product_no: input['product_no'],
        display: input['display'],
        selling: input['selling'],
        product_condition: input['product_condition'],
        product_used_month: input['product_used_month'],
        add_category_no: input['add_category_no'],
        delete_category_no: input['delete_category_no'],
        custom_product_code: input['custom_product_code'],
        product_name: input['product_name'],
        eng_product_name: input['eng_product_name'],
        supply_product_name: input['supply_product_name'],
        internal_product_name: input['internal_product_name'],
        model_name: input['model_name'],
        price_excluding_tax: input['price_excluding_tax'],
        price: input['price'],
        retail_price: input['retail_price'],
        supply_price: input['supply_price'],
        use_naverpay: input['use_naverpay'],
        naverpay_type: input['naverpay_type'],
        manufacturer_code: input['manufacturer_code'],
        trend_code: input['trend_code'],
        brand_code: input['brand_code'],
        supplier_code: input['supplier_code'],
        product_weight: input['product_weight'],
        made_date: input['made_date'],
        release_date: input['release_date'],
        expiration_date: input['expiration_date'],
        description: input['description'],
        mobile_description: input['mobile_description'],
        translated_description: input['translated_description'],
        translated_additional_description: input['translated_additional_description'],
        summary_description: input['summary_description'],
        simple_description: input['simple_description'],
        product_tag: input['product_tag'],
        payment_info: input['payment_info'],
        shipping_info: input['shipping_info'],
        exchange_info: input['exchange_info'],
        service_info: input['service_info'],
        icon: input['icon'],
        use_icon_exposure_term: input['use_icon_exposure_term'],
        icon_exposure_begin_datetime: input['icon_exposure_begin_datetime'],
        icon_exposure_end_datetime: input['icon_exposure_end_datetime'],
        hscode: input['hscode'],
        country_hscode: input['country_hscode'],
        shipping_scope: input['shipping_scope'],
        shipping_method: input['shipping_method'],
        shipping_fee_by_product: input['shipping_fee_by_product'],
        shipping_area: input['shipping_area'],
        shipping_period: input['shipping_period'],
        shipping_fee_type: input['shipping_fee_type'],
        shipping_rates: input['shipping_rates'],
        prepaid_shipping_fee: input['prepaid_shipping_fee'],
        clearance_category_code: input['clearance_category_code'],
        detail_image: input['detail_image'],
        list_image: input['list_image'],
        tiny_image: input['tiny_image'],
        small_image: input['small_image'],
        image_upload_type: input['image_upload_type'],
        additional_information: input['additional_information'],
        price_content: input['price_content'],
        buy_limit_by_product: input['buy_limit_by_product'],
        buy_limit_type: input['buy_limit_type'],
        buy_group_list: input['buy_group_list'],
        buy_member_id_list: input['buy_member_id_list'],
        repurchase_restriction: input['repurchase_restriction'],
        single_purchase_restriction: input['single_purchase_restriction'],
        buy_unit_type: input['buy_unit_type'],
        buy_unit: input['buy_unit'],
        order_quantity_limit_type: input['order_quantity_limit_type'],
        minimum_quantity: input['minimum_quantity'],
        maximum_quantity: input['maximum_quantity'],
        points_by_product: input['points_by_product'],
        points_setting_by_payment: input['points_setting_by_payment'],
        points_amount: input['points_amount'],
        except_member_points: input['except_member_points'],
        product_volume: input['product_volume'],
        origin_classification: input['origin_classification'],
        origin_place_no: input['origin_place_no'],
        origin_place_value: input['origin_place_value'],
        made_in_code: input['made_in_code'],
        main: input['main'],
        relational_product: input['relational_product'],
        product_material: input['product_material'],
        english_product_material: input['english_product_material'],
        cloth_fabric: input['cloth_fabric'],
        classification_code: input['classification_code'],
        additional_price: input['additional_price'],
        margin_rate: input['margin_rate'],
        tax_type: input['tax_type'],
        tax_rate: input['tax_rate'],
        additional_image: input['additional_image'],
        adult_certification: input['adult_certification'],
        exposure_limit_type: input['exposure_limit_type'],
        exposure_group_list: input['exposure_group_list'],
        use_kakaopay: input['use_kakaopay'],
      },
      options,
    );
  };

  cls.prototype.deleteAProduct = async function (input, options) {
    return this.createRequest(
      'DELETE',
      `/api/v2/admin/products/${input['product_no']}`,
      {
        shop_no: input['shop_no'],
        product_no: input['product_no'],
      },
      options,
    );
  };

};

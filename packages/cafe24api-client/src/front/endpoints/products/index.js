
export default (cls) => {
  cls.prototype.retrieveAListOfProducts = async function (input, options) {
    return this.createRequest(
      'GET',
      `/api/v2/products`,
      {
        channeldiscountprices: input['channeldiscountprices'],
        discountprice: input['discountprice'],
        decorationimages: input['decorationimages'],
        benefits: input['benefits'],
        options: input['options'],
        variants: input['variants'],
        additionalimages: input['additionalimages'],
        shop_no: input['shop_no'],
        product_no: input['product_no'],
        display: input['display'],
        selling: input['selling'],
        product_name: input['product_name'],
        product_code: input['product_code'],
        brand_code: input['brand_code'],
        manufacturer_code: input['manufacturer_code'],
        supplier_code: input['supplier_code'],
        trend_code: input['trend_code'],
        product_tag: input['product_tag'],
        custom_product_code: input['custom_product_code'],
        custom_variant_code: input['custom_variant_code'],
        price_min: input['price_min'],
        price_max: input['price_max'],
        retail_price_min: input['retail_price_min'],
        retail_price_max: input['retail_price_max'],
        supply_price_min: input['supply_price_min'],
        supply_price_max: input['supply_price_max'],
        created_start_date: input['created_start_date'],
        created_end_date: input['created_end_date'],
        updated_start_date: input['updated_start_date'],
        updated_end_date: input['updated_end_date'],
        category: input['category'],
        eng_product_name: input['eng_product_name'],
        supply_product_name: input['supply_product_name'],
        internal_product_name: input['internal_product_name'],
        model_name: input['model_name'],
        product_condition: input['product_condition'],
        origin_place_value: input['origin_place_value'],
        stock_quantity_max: input['stock_quantity_max'],
        stock_quantity_min: input['stock_quantity_min'],
        stock_safety_max: input['stock_safety_max'],
        stock_safety_min: input['stock_safety_min'],
        product_weight: input['product_weight'],
        classification_code: input['classification_code'],
        use_inventory: input['use_inventory'],
        category_unapplied: input['category_unapplied'],
        include_sub_category: input['include_sub_category'],
        additional_information_key: input['additional_information_key'],
        additional_information_value: input['additional_information_value'],
        approve_status: input['approve_status'],
        since_product_no: input['since_product_no'],
        product_bundle: input['product_bundle'],
        option_type: input['option_type'],
        market_sync: input['market_sync'],
        sort: input['sort'],
        order: input['order'],
        offset: input['offset'],
        limit: input['limit'],
      },
      options,
    );
  };

  cls.prototype.retrieveACountOfProducts = async function (input, options) {
    return this.createRequest(
      'GET',
      `/api/v2/products/count`,
      {
        shop_no: input['shop_no'],
        product_no: input['product_no'],
        display: input['display'],
        selling: input['selling'],
        product_name: input['product_name'],
        product_code: input['product_code'],
        brand_code: input['brand_code'],
        manufacturer_code: input['manufacturer_code'],
        supplier_code: input['supplier_code'],
        trend_code: input['trend_code'],
        product_tag: input['product_tag'],
        custom_product_code: input['custom_product_code'],
        custom_variant_code: input['custom_variant_code'],
        price_min: input['price_min'],
        price_max: input['price_max'],
        retail_price_min: input['retail_price_min'],
        retail_price_max: input['retail_price_max'],
        supply_price_min: input['supply_price_min'],
        supply_price_max: input['supply_price_max'],
        created_start_date: input['created_start_date'],
        created_end_date: input['created_end_date'],
        updated_start_date: input['updated_start_date'],
        updated_end_date: input['updated_end_date'],
        category: input['category'],
        eng_product_name: input['eng_product_name'],
        supply_product_name: input['supply_product_name'],
        internal_product_name: input['internal_product_name'],
        model_name: input['model_name'],
        product_condition: input['product_condition'],
        origin_place_value: input['origin_place_value'],
        stock_quantity_max: input['stock_quantity_max'],
        stock_quantity_min: input['stock_quantity_min'],
        stock_safety_max: input['stock_safety_max'],
        stock_safety_min: input['stock_safety_min'],
        product_weight: input['product_weight'],
        classification_code: input['classification_code'],
        use_inventory: input['use_inventory'],
        category_unapplied: input['category_unapplied'],
        include_sub_category: input['include_sub_category'],
        additional_information_key: input['additional_information_key'],
        additional_information_value: input['additional_information_value'],
        approve_status: input['approve_status'],
        since_product_no: input['since_product_no'],
        product_bundle: input['product_bundle'],
        option_type: input['option_type'],
        market_sync: input['market_sync'],
      },
      options,
    );
  };

  cls.prototype.retrieveAProductResource = async function (input, options) {
    return this.createRequest(
      'GET',
      `/api/v2/products/${input['product_no']}`,
      {
        shop_no: input['shop_no'],
        product_no: input['product_no'],
        variants: input['variants'],
        memos: input['memos'],
        hits: input['hits'],
        seo: input['seo'],
        tags: input['tags'],
        options: input['options'],
        discountprice: input['discountprice'],
        decorationimages: input['decorationimages'],
        benefits: input['benefits'],
        additionalimages: input['additionalimages'],
      },
      options,
    );
  };

};
